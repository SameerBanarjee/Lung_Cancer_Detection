# -*- coding: utf-8 -*-
"""ProjectML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J7oBDvAFBt4wRZpMRznNqNY2S9DLgYEr
"""

import pandas as pd
import numpy as np
data = pd.read_csv("Lung Cancer Data.csv")
data.head()

data = data.drop('GENDER', axis=1)
data.head()

data.describe()

data = data.astype('float')
data.head()

data['LUNG_CANCER'] = data['LUNG_CANCER'].astype('int')
data.head()

X = data.drop('LUNG_CANCER', axis=1)
X = np.asarray(X)
X[:5]

Y = data['LUNG_CANCER']
Y = np.asarray(Y)
Y[:5]

from sklearn import preprocessing
X = preprocessing.StandardScaler().fit(X).transform(X)
X[0:5]

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
data.hist(bins=50, figsize=(20,15))
plt.show()

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size=0.2, random_state=42)
print(f"Rows in Training Set: {len(X_train)}")
print(f"Rows in Test Set: {len(X_test)}")

from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(X, Y):
    X_train, X_test = X[train_index], X[test_index]
    Y_train, Y_test = Y[train_index], Y[test_index]
print(f"Rows in Training Set: {len(X_train)}")
print(f"Rows in Test Set: {len(X_test)}")

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn import svm
model = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,Y_train)
# model = KNeighborsClassifier(n_neighbors = 4).fit(X_train, Y_train)
# model = svm.SVC(kernel='rbf')
# model.fit(X_train, Y_train)
model

Y_hat = model.predict(X_test)
Y_hat

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import log_loss

def Model_Report(Y_test, Y_hat):
    precision = precision_score(Y_test, Y_hat)
    print(f'Precision: {precision}')
    recall = recall_score(Y_test, Y_hat)
    print(f'Recall Score: {recall}')
    conf_matrix = confusion_matrix(Y_test, Y_hat)
    print(f'Confusion Matrix: {conf_matrix}')
    logloss = log_loss(Y_test, Y_hat)
    print(f'Log Loss: {logloss}')

Model_Report(Y_test, Y_hat)

from joblib import dump, load
dump(model, 'CancerDetection.joblib')

import pandas as pd
import numpy as np
from joblib import load
from sklearn import preprocessing

# Load the trained model from the joblib file
model = load('CancerDetection.joblib')
print("Model loaded successfully!")

import pandas as pd
import numpy as np
from joblib import load
from sklearn import preprocessing

# Load the pre-trained model
model = load('CancerDetection.joblib')
print("Model loaded successfully!")

# Create new diverse test cases
new_data = pd.DataFrame({
    'Age': [25, 35, 45, 60, 70, 50],  # Various ages
    'Smoking': [0, 0, 1, 0, 1, 1],  # Smoking status (0 = No, 1 = Yes)
    'PollutionExposure': [1, 1, 2, 0, 3, 1],  # Levels of pollution exposure
    'LungCapacity': [90, 85, 70, 95, 60, 80],  # Lung capacity percentages
    'GeneticRisk': [0, 1, 2, 0, 3, 2],  # Genetic risk levels
    'ChestPain': [0, 0, 1, 0, 1, 1],  # Chest pain presence (0 = No, 1 = Yes)
    'PEER_PRESSURE':[0,0,1,0,0,1],
    'FATIGUE':[0,0,1,0,1,1],
    'ALLERGY':[0,0,1,0,1,1],
    'WHEEZING':[0,0,1,0,0,1],
    'ALCOHOL CONSUMING':[1,0,0,1,0,1],
    'COUGHING':[0,0,1,0,1,1],
    'SHORTNESS OF BREATH':[0,0,1,0,1,1],
    'SWALLOWING DIFFICULTY':[0,0,1,0,1,1]
})
print("New Data for Testing:")
print(new_data)

# Apply StandardScaler to match training preprocessing
scaler = preprocessing.StandardScaler().fit(new_data)
X_new = scaler.transform(new_data)

# Predict outcomes
predictions = model.predict(X_new)

# Interpret predictions
outcome = ["Cancer Detected" if pred == 1 else "No Cancer Detected" for pred in predictions]

# Combine new data with predictions
new_data['Prediction'] = outcome
print("Predictions for New Data:")
print(new_data)

!pip install tabulate

from tabulate import tabulate

# Convert DataFrame to table
table = tabulate(new_data, headers='keys', tablefmt='pretty')
print(table)